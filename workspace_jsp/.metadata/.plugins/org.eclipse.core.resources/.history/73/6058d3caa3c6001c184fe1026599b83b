<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%-- <%@ page import="java.sql.Connection, java.sql.Statement" %>  --%>
<%@ page import="java.sql.*" %> <%-- on-demand import 방법  --%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>insertTest01Pro</title>
<style>

</style>
</head>

<%--
< JDBC 연동 프로그래밍 >

1. C(Create)- insert
< JSP 페이지에서 DB로 데이터를 삽입하는 작업 >
1단계 : 드라이버명으로 DB를 확인
2단계 : url, 계정명, 계정비밀번호를 사용하여 DB에 접속 -> 커넥션을 획득 (Connection 객체)
3단계 : Statement, PreparedStatement, CallableStatment 3가지 중에 하나의 객체를 생성
- Statement : SQL을 사용할 수 있는 객체
	-- sql을 연결하여 질의하는 방법을 제공
	-- 단점 : 연결된 sql문이 길어지고, 복잡함.
- PreparedStatement : SQL문을 사용할 수 있는 객체
	-- sql을 연결하여 질의하는 방법을 제공
	-- Statement 객체의 단점을 보완
	-- 장점: sql문 간결, 바인딩 변수(홀더)를 사용
- CallableStatement : PL/SQL을 사용할 수 있는 객체
4단계 : Statement, PreparedStatement 객체를 사용하여 sql문을 실행함.

 --%>

<body>

	<div id="container">
		<h2>회원 정보 확인</h2>
		
		<%
		request.setCharacterEncoding("utf-8");
		
		// 1번 - 폼에서 넘어오는 데이터 받는 방법(request)
		/*
		String id = request.getParameter("id");
		String pwd = request.getParameter("pwd");
		String name = request.getParameter("name");
		int age = Integer.parseInt(request.getParameter("age"));
		*/
		
		%>
		
		<%-- 2번 - 폼에서 넘어오는 데이터 받는 방법(action tag 중에서 useBean 사용) --%>
		<jsp:useBean id="member" class="bean.Member"/>
		<jsp:setProperty property="*" name="member"/>
		<%
		String id = member.getId();
		String pwd = member.getPwd();
		String name = member.getName();
		int age = member.getAge();
		
		// --------------------------------------------
		
		// DB의 접속 정보
		String url = "jdbc:mysql://localhost:3306/db01";
		String dbId = "ezen01"; // db에서 얻어온 id
		String dbPwd = "1234"; // db에서 얻어온 pwd
		
		Connection conn = null;
		Statement stmt = null;
		
		try {
			
		} catch(Exception e) {
			
		} finally {
			
		}
		%>
	</div>

		
</body>
</html>