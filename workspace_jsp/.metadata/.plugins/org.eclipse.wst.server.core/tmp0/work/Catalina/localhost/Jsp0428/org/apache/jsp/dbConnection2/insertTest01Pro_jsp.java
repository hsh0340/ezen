/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.62
 * Generated at: 2022-04-28 04:08:07 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.dbConnection2;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;

public final class insertTest01Pro_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      out.write(' ');
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>insertTest01Pro</title>\r\n");
      out.write("<style>\r\n");
      out.write("\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("	<div id=\"container\">\r\n");
      out.write("		<h2>회원 정보 확인</h2>\r\n");
      out.write("		\r\n");
      out.write("		");

		request.setCharacterEncoding("utf-8");
		
		// 1번 - 폼에서 넘어오는 데이터 받는 방법(request)
		/*
		String id = request.getParameter("id");
		String pwd = request.getParameter("pwd");
		String name = request.getParameter("name");
		int age = Integer.parseInt(request.getParameter("age"));
		*/
		
		
      out.write("\r\n");
      out.write("		\r\n");
      out.write("		");
      out.write("\r\n");
      out.write("		");
      bean.Member member = null;
      member = (bean.Member) _jspx_page_context.getAttribute("member", javax.servlet.jsp.PageContext.PAGE_SCOPE);
      if (member == null){
        member = new bean.Member();
        _jspx_page_context.setAttribute("member", member, javax.servlet.jsp.PageContext.PAGE_SCOPE);
      }
      out.write("\r\n");
      out.write("		");
      org.apache.jasper.runtime.JspRuntimeLibrary.introspect(_jspx_page_context.findAttribute("member"), request);
      out.write("\r\n");
      out.write("		");

		String id = member.getId();
		String pwd = member.getPwd();
		String name = member.getName();
		int age = member.getAge();
		
		// --------------------------------------------
		
		// DB의 접속 정보
		String url = "jdbc:mysql://localhost:3306/db01";
		String dbId = "ezen01"; // db에서 얻어온 id
		String dbPwd = "1234"; // db에서 얻어온 pwd
		
		// 연결, 질의 객체
		Connection conn = null;
		//Statement stmt = null;
		PreparedStatement pstmt = null;
		
		// SQL 문 - INSERT문
		// 1번 - Statement 객체에서 사용하는 sql문
		// String sql = "INSERT INTO member VALUES('"+id+"', '"+pwd+"', '"+name+"', "+age+", NOW())"; -> statement 객체쓸 때 sql
		
		// 2번 - PreparedStatement 객체에서 사용하는 sql문
		String sql = "INSERT INTO member VALUES(?, ?, ?, ?, NOW())"; // ? : 바인딩 변수
		int cnt = 0;
		
		try {
			Class.forName("com.mysql.jdbc.Driver"); // 1단계 : MySQL DB 드라이버를 확인
			conn = DriverManager.getConnection(url, dbId, dbPwd); // 2단계 : DB 접속 -> 커넥션 획득
			
			// 1번 - Statement 객체 사용
			//stmt = conn.createStatement(); // 3단계: statement 객체를 생성
			//cnt = stmt.executeUpdate(sql); // 4단계: statement 객체를 사용하여 sql문을 실행 -> 결과는 insert, update, delete인 경우에는
			  						 		//											 행의 수를 리턴
			  						 		
			// 2번 - PreparedStatement 객체 사용
			pstmt = conn.prepareStatement(sql); // 실행할 때 바로 sql문 집어넣고 씀 // 3단계: preparedStatement 객체를 생성하고, 바이딩 변수에 값을 삽입
			pstmt.setString(1, id); // 첫번째 바인딩변수에 id를 넣음 : setString(바인딩변수 순서, 넣을값)
			pstmt.setString(2, pwd);
			pstmt.setString(3, name);
			pstmt.setInt(4, age);
			cnt = pstmt.executeUpdate(); // 4단계: sql문을 실행 -> 결과는 insert, update, delete의 경우에 행 수를 리턴한다. 성공 못하면 0
			
			if (cnt > 0) { // insert 성공;
				out.print("데이터 추가에 성공하였습니다.");	
			} else { // insert 실패
				out.print("데이터 추가에 실패하였습니다.");
			}
		} catch(Exception e) {
			e.printStackTrace();
			out.print("데이터 추가시에 예외가 발생하였습니다.");
		} finally {
			if (pstmt != null) {
				// 닫다가 또 예외발생할 수 도 있음.
				try {
					pstmt.close();					
				} catch(Exception e) {
					e.printStackTrace();
				} // end of try-catch
			} // end of if
			
			if (conn != null) {
				// 닫다가 또 예외발생할 수 도 있음.
				try {
					conn.close();
				} catch(Exception e) {
					e.printStackTrace();
				}	
			}
		}
		
      out.write("\r\n");
      out.write("	</div>\r\n");
      out.write("\r\n");
      out.write("		\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
