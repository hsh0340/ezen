/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.62
 * Generated at: 2022-04-28 07:19:43 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.dbConnection2;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import java.text.SimpleDateFormat;

public final class selectTest02Pro_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>selectTest02Pro</title>\r\n");
      out.write("<style>\r\n");
      out.write("	# container {\r\n");
      out.write("		width: 400px;\r\n");
      out.write("		margin: 20px auto;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	h2 {\r\n");
      out.write("		text-align: center;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	table {\r\n");
      out.write("		width: 100%;\r\n");
      out.write("		border: 1px solid black;\r\n");
      out.write("		border-collapse: collapse;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	tr {\r\n");
      out.write("		height: 40px;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	th, td {\r\n");
      out.write("		border: 1px solid black;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	th {\r\n");
      out.write("		background-color: #ccc;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	td {\r\n");
      out.write("		text-align: center;\r\n");
      out.write("	}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <div id=\"container\">\r\n");
      out.write("    	");

    	request.setCharacterEncoding("utf-8");
    	SimpleDateFormat sdf = new SimpleDateFormat("yyyy년 MM월 dd일 HH:mm:ss");
    	
    	// 폼의 파라미터 값을 받음
    	String id = request.getParameter("id");
    	String pwd = request.getParameter("pwd");
    	
		// DB의 접속 정보
		String url = "jdbc:mysql://localhost:3306/db01?SSL=false;";
		String dbId = "ezen01"; // db에서 얻어온 id
		String dbPwd = "1234"; // db에서 얻어온 pwd
				
		// 연결, 질의, 결과테이블 객체
		Connection conn = null; // 연결
		PreparedStatement pstmt = null; // 질의
		ResultSet rs = null; // 결과테이블 객체
		
		// sql문 - SELECT 일 때 - 조건의 아이디에 해당하는 사원 조회
		String sql = "SELECT * FROM member WHERE id = ?";
		
		try {
			Class.forName("com.mysql.jdbc.Driver"); // 1단계
			conn = DriverManager.getConnection(url, dbId, dbPwd); // 2단계 - DB접속
			
			pstmt = conn.prepareStatement(sql); // 3단계 - pstmt 생성, 바인딩 변수 값을 설정
			pstmt.setString(1, id);
			pstmt.executeQuery();
			rs = pstmt.executeQuery(); // 4단계 - sql문 실행, rs로 결과를 받음
			
			// 1건의 데이터는 if문 사용, 여러건의 데이터는 while문 사용 
			if (rs.next()) { // id가 존재한다.
				String t_pwd = rs.getString("pwd"); 
				if (pwd.equals(t_pwd)) { // 아이디가 존재하고, 그 아이디의 비밀번호와 일치할 때
					String name = rs.getString("name");
					int age = rs.getInt("age");
					Timestamp regDate = rs.getTimestamp("regDate");
				
					out.print("<h2>" + id + "님의 회원정보</h2><br>");
					out.print("<table>");
					out.print("<tr><th>아이디</th><td>" + id + "</td></tr>");
					out.print("<tr><th>비밀번호</th><td>" + pwd + "</td></tr>");
					out.print("<tr><th>이름</th><td>" + name + "</td></tr>");
					out.print("<tr><th>나이</th><td>" + age + "</td></tr>");
					out.print("<tr><th>가입일자</th><td>" + sdf.format(regDate) + "</td></tr>");
					out.print("</table>");
				} else {  // id가 존재하지 않는 상태, 아이디는 존재하지만 그 아이디의 비밀번호가 일치하지 않을 때
				out.print("<script>alert('비밀번호가 일치하지 않습니다.');history.back();</script>");	
				}
			} else { // 아이디가 존재하지 않음
				out.print("<script>alert('아이디가 존재하지 않습니다.');history.back();</script>");
			}
		} catch(Exception e) {
			e.printStackTrace();
		} finally {
			if (rs != null) try {rs.close();} catch(Exception e) {e.printStackTrace();} // 닫으면서 예외처리
			
			if (pstmt != null) try {pstmt.close();} catch(Exception e) {e.printStackTrace();} // 닫으면서 예외처리
			
			if (conn != null)  try {conn.close();} catch(Exception e) {e.printStackTrace();} // 닫으면서 예외처리
		}
    	
      out.write("\r\n");
      out.write("    </div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
