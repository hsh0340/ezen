/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.62
 * Generated at: 2022-05-06 01:06:30 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.board;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import board.*;
import java.util.*;
import java.text.*;

public final class boardList_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("java.text");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_packages.add("board");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>게시판 전체보기</title>\r\n");
      out.write("<style>\r\n");
      out.write("@import\r\n");
      out.write("	url('https://fonts.googleapis.com/css2?family=Paytone+One&display=swap');\r\n");
      out.write("\r\n");
      out.write("@import\r\n");
      out.write("	url('https://fonts.googleapis.com/css2?family=Do+Hyeon&display=swap');\r\n");
      out.write("\r\n");
      out.write("#container {\r\n");
      out.write("	width: 1000px;\r\n");
      out.write("	margin: 0 auto;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("a {\r\n");
      out.write("	text-decoration: none;\r\n");
      out.write("	color: black;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* 상단 - 메인, 서브 타이틀 */\r\n");
      out.write(".m_title {\r\n");
      out.write("	font-family: 'Paytone One', sans-serif;\r\n");
      out.write("	font-size: 3em;\r\n");
      out.write("	text-align: center;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".s_title {\r\n");
      out.write("	font-family: 'Do Hyeon', sans-serif;\r\n");
      out.write("	font-size: 2em;\r\n");
      out.write("	text-align: center;\r\n");
      out.write("	margint-bottom: 30px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".top_info {\r\n");
      out.write("	text-align: right;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".s_id, .s_logout, .s_write {\r\n");
      out.write("	font-weight: bold;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".s_logout a {\r\n");
      out.write("	color: #c84557; \r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".s_write a {\r\n");
      out.write("	color: #1e94be;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* 중단 - 게시판 전체 테이블 */\r\n");
      out.write("table {\r\n");
      out.write("	width: 100%;\r\n");
      out.write("	margin-top: 50px;\r\n");
      out.write("	border: 1px solid black;\r\n");
      out.write("	border-collapse: collapse;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("tr {\r\n");
      out.write("	height: 30px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("tr:nth-child(2n+1) {\r\n");
      out.write("	background-color: #f8f9fa;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("th, td {\r\n");
      out.write("	border: 1px solid black;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("th {\r\n");
      out.write("	background: #ced4da;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".center {\r\n");
      out.write(" 	text-align: center;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".left {\r\n");
      out.write("	padding-left: 5px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".left:hover {\r\n");
      out.write("	font-weight: bold;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".left:hover a {\r\n");
      out.write("	color: #32708d;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");

String memberId = (String)session.getAttribute("memberId");
if (memberId == null) {
	// 세션이 null인 경우
	// 뭔가 잘못돼서 null이 되면 다시 돌아감
	out.print("<script>location='../logon/memberLoginForm.jsp'</script>");
}

// 날짜 형식 클래스
SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");


// 게시판 전체 정보를 획득
BoardDAO boardDAO = BoardDAO.getInstance();
List<BoardDTO> boardList = boardDAO.getBoardList();
int number = boardList.size(); // 전체크기



      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("	<div id=\"container\">\r\n");
      out.write("		<div class=\"m_title\">\r\n");
      out.write("			<a href=\"#\">EZEN MALL</a>\r\n");
      out.write("		</div>\r\n");
      out.write("		<div class=\"s_title\">전체 게시판</div>\r\n");
      out.write("		<br>\r\n");
      out.write("		<div class=\"top_info\">\r\n");
      out.write("			<a href=\"../member/memberInfoForm.jsp\"><span class=\"s_id\">");
      out.print(memberId );
      out.write("님</span></a>&emsp;\r\n");
      out.write("			|&emsp; <span class=\"s_logout\"><a href=\"../logon/memberLogout.jsp\">로그아웃</a></span>&emsp;\r\n");
      out.write("			|&emsp; <span class=\"s_write\"><a href=\"boardWriteForm.jsp\">글등록</a></span>\r\n");
      out.write("		</div>\r\n");
      out.write("		\r\n");
      out.write("		<table>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th width=\"8%\" class=\"center\">번호</th>\r\n");
      out.write("				<th width=\"50%\" class=\"left\">제목</th>\r\n");
      out.write("				<th width=\"14%\" class=\"center\">작성자</th>\r\n");
      out.write("				<th width=\"20%\" class=\"center\">작성일</th>\r\n");
      out.write("				<th width=\"8%\" class=\"center\">조회수</th>\r\n");
      out.write("			</tr>\r\n");
      out.write("			\r\n");
      out.write("			");
if (boardList.size() == 0) {
      out.write("\r\n");
      out.write("				<tr><td>등록된 글이 없습니다.</td></tr>\r\n");
      out.write("			");
}else {
				for(BoardDTO board : boardList) {
					int num = board.getNum();
				
				
      out.write("\r\n");
      out.write("				<tr>\r\n");
      out.write("					<td class=\"center\">");
      out.print(number-- );
      out.write("</td>\r\n");
      out.write("					<td class=\"left title\"><a href=\"boardContent.jsp?num=");
      out.print(num);
      out.write('"');
      out.write('>');
      out.print(board.getSubject() );
      out.write("</a></td>\r\n");
      out.write("					<td class=\"center\">");
      out.print(board.getWriter() );
      out.write("</td>\r\n");
      out.write("					<td class=\"center\">");
      out.print(sdf.format(board.getRegDate()) );
      out.write("</td>\r\n");
      out.write("					<td class=\"center\">");
      out.print(board.getReadcount() );
      out.write("</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				\r\n");
      out.write("				");
 }
			  }
      out.write("\r\n");
      out.write("		</table>\r\n");
      out.write("	</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
